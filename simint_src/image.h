#ifndef image_h
#define image_h

#define PNMAX 20  /* Max allowable length of a procedure name */
#define MNMAX 20  /* Max allowable length of a procedure-member name */
/*
 * Enumerate recognized Fits axis types.
 */
typedef enum {
  AX_DEG,        /* Degrees -- type of RA/DEC */
  AX_RAD,
  AX_U,
  AX_V,
  AX_UNKNOWN
} Axis;
/*
 * And a container for associating a header string with this unit.
 */
typedef struct {
  char *string;
  char *label;
  Axis axis;
} Axiscard;
/*
 * Enumerate recognized Fits bunits.
 */
typedef enum {
  BU_MJYSR,  // MJy/sr 
  BU_JY,     // Jy 
  BU_JYBEAM, // Jy/Beam 
  BU_MUK,    // MicroKelvin 
  BU_K,      // Kelvin 
  BU_Y,      // Compton Y in units of TCMB (K)
  BU_UNKNOWN
} Bunit;
/*
 * And a container for associating a header string with this bunit.
 */
typedef struct {
  char *string;
  char *label;
  Bunit bunit;
} Bunitcard;
/*
 * Enumerate known image types.
 */
typedef enum {
  T_RE=1,
  T_CMPLX=2,
  T_FFTW=4     /* Generated by FFTW */
} Imtype;
/*
 * The header descriptor associated with an image.
 */
typedef struct {
  int bitpix;  
  int naxis;   
  int *naxes_data;/* The number of pixels in each dimension which are filled with data. */  
  int *data_start;/* The number of pixels in each dimension which are filled with data. */  
  int *naxes_actual;/* The actual size of the data array in each dimension */
  float n;          /* The total number of data elements (actual) in data */
  float bscale;
  Bunit bunit; /* A recognized unit type. */
  float bzero; 
  float *crvals;
  float *crpixs;
  float *cdelts;
  float *crotas;
  Axis *ctypes;      /* An array of axis types. */
  float datamin;
  float datamax;
  char *telescope;
  char *instrument;
  float xmin;       /* Derived members. */
  float xmax;       /* Derived members. */
  float ymin;       /* Derived members. */
  float ymax;       /* Derived members. */
  int imin,imax;    /* The min max x-index to greyscale */
  int jmin,jmax;    /* The min max y-index to greyscale */
  Imtype type;      /* Is this complex or real data? */
} Fitshead;
/*
 * Declare the object type used to store a FITS image or its transform.
 */
typedef struct {
  char *name;     /* The internal name of this image. */    
  float *re;      /* The real data */
  float *im;      /* The imaginary data */
  Fitshead *header;
} Image;

Image *get_image(int findex);
Image *imfind(char *imnam);
int add_image(Image *image);
Image *rem_image(int findex);
void zap_images(void);
int imindex(Image *image);
Image *new_Image(char *name, Fitshead *header);
Image *del_Image(Image *image);
Fitshead *new_Fitshead(char* units);
Fitshead *del_Fitshead(Fitshead *header);
int copy_Fitshead(Fitshead *orig, Fitshead *dest);
int native_to_radian(Image *image, int iaxis, float *delta);
int native_to_jansky(Image *image, float freq, float *conv);

char* printUnits(Bunit unit);

#endif
